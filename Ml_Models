{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Tahsin-Azad-Tias/Thesis/blob/main/Ml_Models\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install catboost\n",
        "!pip install xgboost\n",
        "!pip install lightgbm"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lPYF-dKErAkU",
        "outputId": "8aed15fc-64ac-4758-9abe-57dd90f9e53a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting catboost\n",
            "  Downloading catboost-1.2.5-cp310-cp310-manylinux2014_x86_64.whl (98.2 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.2/98.2 MB\u001b[0m \u001b[31m6.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: graphviz in /usr/local/lib/python3.10/dist-packages (from catboost) (0.20.3)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from catboost) (3.7.1)\n",
            "Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.25.2)\n",
            "Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.10/dist-packages (from catboost) (2.0.3)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from catboost) (1.11.4)\n",
            "Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from catboost) (5.15.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from catboost) (1.16.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2024.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (4.51.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (24.0)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (3.1.2)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->catboost) (8.3.0)\n",
            "Installing collected packages: catboost\n",
            "Successfully installed catboost-1.2.5\n",
            "Requirement already satisfied: xgboost in /usr/local/lib/python3.10/dist-packages (2.0.3)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.25.2)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.11.4)\n",
            "Requirement already satisfied: lightgbm in /usr/local/lib/python3.10/dist-packages (4.1.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from lightgbm) (1.25.2)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from lightgbm) (1.11.4)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!gdown --id \"1FJTjHI3WvDLEAU1GPH9s7Uhi5sbCPXaY\"\n",
        "!gdown --id \"1qYCf-RKv1q28OYDzYioZ1kKimIxDnz8B\""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZD_E2K8myJGt",
        "outputId": "932bc929-a1e2-415b-cdf2-036090d52dbb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/gdown/__main__.py:132: FutureWarning: Option `--id` was deprecated in version 4.3.1 and will be removed in 5.0. You don't need to pass it anymore to use a file ID.\n",
            "  warnings.warn(\n",
            "Downloading...\n",
            "From: https://drive.google.com/uc?id=1FJTjHI3WvDLEAU1GPH9s7Uhi5sbCPXaY\n",
            "To: /content/train.csv\n",
            "100% 15.8M/15.8M [00:00<00:00, 84.0MB/s]\n",
            "/usr/local/lib/python3.10/dist-packages/gdown/__main__.py:132: FutureWarning: Option `--id` was deprecated in version 4.3.1 and will be removed in 5.0. You don't need to pass it anymore to use a file ID.\n",
            "  warnings.warn(\n",
            "Downloading...\n",
            "From: https://drive.google.com/uc?id=1qYCf-RKv1q28OYDzYioZ1kKimIxDnz8B\n",
            "To: /content/test.csv\n",
            "100% 4.34M/4.34M [00:00<00:00, 158MB/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Libraries"
      ],
      "metadata": {
        "id": "6LkbvnW_vcHr"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uZnwUadOqqHM"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.metrics import precision_recall_fscore_support\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import classification_report\n",
        "from catboost import CatBoostClassifier\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.svm import SVC\n",
        "import lightgbm as lgb\n",
        "from sklearn import metrics\n",
        "from sklearn.metrics import confusion_matrix"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Load Data"
      ],
      "metadata": {
        "id": "ZmLa9J9XrI6T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_df = pd.read_csv(\"/content/train.csv\")\n",
        "test_df = pd.read_csv(\"/content/test.csv\")"
      ],
      "metadata": {
        "id": "pf-bnLKdrEI9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_df.shape, test_df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L-Yh9GZhrT5S",
        "outputId": "aff0e813-e9af-4333-c452-9908e12c61c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((16316, 52), (4478, 52))"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        },
        "id": "70ZXMRTgrbDz",
        "outputId": "fbedb12a-90eb-4da1-a670-6b08d2349ad7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          0         1         2         3         4         5         6  \\\n",
              "0  0.297639  0.205715 -1.445339  0.138043 -0.025925 -2.083185 -0.654751   \n",
              "1  0.612671  0.412815 -1.052995 -0.802563 -0.520758 -1.100657  0.082040   \n",
              "2 -0.856595 -0.380705 -1.047218 -0.378246  0.796028 -1.142484 -0.166047   \n",
              "3 -0.429678 -0.760051 -0.751340  1.256115 -0.475671 -0.145215 -1.281801   \n",
              "4 -0.931518 -0.391635 -1.044777 -0.187636  0.552180 -0.896201 -0.298272   \n",
              "\n",
              "          7         8         9  ...        42        43        44        45  \\\n",
              "0  0.218002  0.715108 -0.626010  ... -0.530842 -0.542794  1.320145  1.721702   \n",
              "1  0.513884  0.475298 -0.295127  ... -0.799098  0.440767  0.850914 -0.246414   \n",
              "2 -0.486184 -1.112462  0.046874  ... -0.100935 -0.804614  0.067498 -0.122768   \n",
              "3 -0.616515 -0.624351  0.825960  ...  1.862388  2.002589  0.015711 -0.362337   \n",
              "4 -0.640623 -1.384410  0.238580  ... -0.668088  0.039570  0.779120 -0.526614   \n",
              "\n",
              "         46        47        48        49  label1  label_falut  \n",
              "0  1.827125  1.293097  0.632987  0.499707       7            1  \n",
              "1 -0.209578 -0.107226  0.193872 -0.416698       7            1  \n",
              "2  0.688677 -0.045386  0.018459  0.194292      20            0  \n",
              "3 -0.890268  1.619069 -1.136229  1.340813       3            0  \n",
              "4 -0.486924 -0.235112 -0.345948 -0.736096      20            0  \n",
              "\n",
              "[5 rows x 52 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8370648f-7ff4-4935-9875-45e44a6fb605\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>42</th>\n",
              "      <th>43</th>\n",
              "      <th>44</th>\n",
              "      <th>45</th>\n",
              "      <th>46</th>\n",
              "      <th>47</th>\n",
              "      <th>48</th>\n",
              "      <th>49</th>\n",
              "      <th>label1</th>\n",
              "      <th>label_falut</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.297639</td>\n",
              "      <td>0.205715</td>\n",
              "      <td>-1.445339</td>\n",
              "      <td>0.138043</td>\n",
              "      <td>-0.025925</td>\n",
              "      <td>-2.083185</td>\n",
              "      <td>-0.654751</td>\n",
              "      <td>0.218002</td>\n",
              "      <td>0.715108</td>\n",
              "      <td>-0.626010</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.530842</td>\n",
              "      <td>-0.542794</td>\n",
              "      <td>1.320145</td>\n",
              "      <td>1.721702</td>\n",
              "      <td>1.827125</td>\n",
              "      <td>1.293097</td>\n",
              "      <td>0.632987</td>\n",
              "      <td>0.499707</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.612671</td>\n",
              "      <td>0.412815</td>\n",
              "      <td>-1.052995</td>\n",
              "      <td>-0.802563</td>\n",
              "      <td>-0.520758</td>\n",
              "      <td>-1.100657</td>\n",
              "      <td>0.082040</td>\n",
              "      <td>0.513884</td>\n",
              "      <td>0.475298</td>\n",
              "      <td>-0.295127</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.799098</td>\n",
              "      <td>0.440767</td>\n",
              "      <td>0.850914</td>\n",
              "      <td>-0.246414</td>\n",
              "      <td>-0.209578</td>\n",
              "      <td>-0.107226</td>\n",
              "      <td>0.193872</td>\n",
              "      <td>-0.416698</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.856595</td>\n",
              "      <td>-0.380705</td>\n",
              "      <td>-1.047218</td>\n",
              "      <td>-0.378246</td>\n",
              "      <td>0.796028</td>\n",
              "      <td>-1.142484</td>\n",
              "      <td>-0.166047</td>\n",
              "      <td>-0.486184</td>\n",
              "      <td>-1.112462</td>\n",
              "      <td>0.046874</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.100935</td>\n",
              "      <td>-0.804614</td>\n",
              "      <td>0.067498</td>\n",
              "      <td>-0.122768</td>\n",
              "      <td>0.688677</td>\n",
              "      <td>-0.045386</td>\n",
              "      <td>0.018459</td>\n",
              "      <td>0.194292</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.429678</td>\n",
              "      <td>-0.760051</td>\n",
              "      <td>-0.751340</td>\n",
              "      <td>1.256115</td>\n",
              "      <td>-0.475671</td>\n",
              "      <td>-0.145215</td>\n",
              "      <td>-1.281801</td>\n",
              "      <td>-0.616515</td>\n",
              "      <td>-0.624351</td>\n",
              "      <td>0.825960</td>\n",
              "      <td>...</td>\n",
              "      <td>1.862388</td>\n",
              "      <td>2.002589</td>\n",
              "      <td>0.015711</td>\n",
              "      <td>-0.362337</td>\n",
              "      <td>-0.890268</td>\n",
              "      <td>1.619069</td>\n",
              "      <td>-1.136229</td>\n",
              "      <td>1.340813</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.931518</td>\n",
              "      <td>-0.391635</td>\n",
              "      <td>-1.044777</td>\n",
              "      <td>-0.187636</td>\n",
              "      <td>0.552180</td>\n",
              "      <td>-0.896201</td>\n",
              "      <td>-0.298272</td>\n",
              "      <td>-0.640623</td>\n",
              "      <td>-1.384410</td>\n",
              "      <td>0.238580</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.668088</td>\n",
              "      <td>0.039570</td>\n",
              "      <td>0.779120</td>\n",
              "      <td>-0.526614</td>\n",
              "      <td>-0.486924</td>\n",
              "      <td>-0.235112</td>\n",
              "      <td>-0.345948</td>\n",
              "      <td>-0.736096</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 52 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8370648f-7ff4-4935-9875-45e44a6fb605')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8370648f-7ff4-4935-9875-45e44a6fb605 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8370648f-7ff4-4935-9875-45e44a6fb605');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-27178921-bdc8-4cba-b9cf-4527803bf9b9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-27178921-bdc8-4cba-b9cf-4527803bf9b9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-27178921-bdc8-4cba-b9cf-4527803bf9b9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "train_df"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        },
        "id": "BZpnZG1Ird0w",
        "outputId": "effd1951-d5c6-4d51-b6c5-050e50512145"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          0         1         2         3         4         5         6  \\\n",
              "0 -0.812234 -0.451574 -1.551336 -0.400907  0.716273 -0.607684 -0.320304   \n",
              "1 -0.489538 -1.118409  1.555392  0.589597  0.091548  0.255844  1.245180   \n",
              "2 -0.959437 -0.866206 -0.886379 -0.644148 -0.063314  0.484412 -0.076292   \n",
              "3  2.504458  0.357024  0.237177 -1.081477  0.364874 -1.106034  0.596284   \n",
              "4 -0.910989  0.070776 -0.669737 -0.503817  0.841569 -1.730113  0.618766   \n",
              "\n",
              "          7         8         9  ...        42        43        44        45  \\\n",
              "0 -0.914416 -1.860264 -0.193730  ...  0.330402 -0.635878  0.195180 -0.746888   \n",
              "1 -0.809347 -1.258415 -1.123218  ...  0.918450 -0.526905 -0.221331 -0.123009   \n",
              "2 -0.791059 -0.323010  0.438017  ...  0.521642 -0.123839 -0.131638  0.254993   \n",
              "3  0.227070  1.611493  2.298601  ... -0.056193 -0.701248 -0.298857 -0.297962   \n",
              "4  1.189990  1.052326 -0.604059  ...  0.305021 -0.180152 -0.105075 -0.152707   \n",
              "\n",
              "         46        47        48        49  label1  label_falut  \n",
              "0 -0.249497 -0.254504  0.239719  0.571523      20            0  \n",
              "1  0.719461  0.389185  0.671366  0.069547       0            0  \n",
              "2  0.303123 -0.116530 -0.339037  1.252501       5            1  \n",
              "3  0.423388  0.015777 -0.684635  0.056419      12            1  \n",
              "4 -0.414037 -0.386729  0.087169  0.955003      11            1  \n",
              "\n",
              "[5 rows x 52 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fb4769c6-47fd-49db-a470-64443ff26d61\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>42</th>\n",
              "      <th>43</th>\n",
              "      <th>44</th>\n",
              "      <th>45</th>\n",
              "      <th>46</th>\n",
              "      <th>47</th>\n",
              "      <th>48</th>\n",
              "      <th>49</th>\n",
              "      <th>label1</th>\n",
              "      <th>label_falut</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.812234</td>\n",
              "      <td>-0.451574</td>\n",
              "      <td>-1.551336</td>\n",
              "      <td>-0.400907</td>\n",
              "      <td>0.716273</td>\n",
              "      <td>-0.607684</td>\n",
              "      <td>-0.320304</td>\n",
              "      <td>-0.914416</td>\n",
              "      <td>-1.860264</td>\n",
              "      <td>-0.193730</td>\n",
              "      <td>...</td>\n",
              "      <td>0.330402</td>\n",
              "      <td>-0.635878</td>\n",
              "      <td>0.195180</td>\n",
              "      <td>-0.746888</td>\n",
              "      <td>-0.249497</td>\n",
              "      <td>-0.254504</td>\n",
              "      <td>0.239719</td>\n",
              "      <td>0.571523</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.489538</td>\n",
              "      <td>-1.118409</td>\n",
              "      <td>1.555392</td>\n",
              "      <td>0.589597</td>\n",
              "      <td>0.091548</td>\n",
              "      <td>0.255844</td>\n",
              "      <td>1.245180</td>\n",
              "      <td>-0.809347</td>\n",
              "      <td>-1.258415</td>\n",
              "      <td>-1.123218</td>\n",
              "      <td>...</td>\n",
              "      <td>0.918450</td>\n",
              "      <td>-0.526905</td>\n",
              "      <td>-0.221331</td>\n",
              "      <td>-0.123009</td>\n",
              "      <td>0.719461</td>\n",
              "      <td>0.389185</td>\n",
              "      <td>0.671366</td>\n",
              "      <td>0.069547</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.959437</td>\n",
              "      <td>-0.866206</td>\n",
              "      <td>-0.886379</td>\n",
              "      <td>-0.644148</td>\n",
              "      <td>-0.063314</td>\n",
              "      <td>0.484412</td>\n",
              "      <td>-0.076292</td>\n",
              "      <td>-0.791059</td>\n",
              "      <td>-0.323010</td>\n",
              "      <td>0.438017</td>\n",
              "      <td>...</td>\n",
              "      <td>0.521642</td>\n",
              "      <td>-0.123839</td>\n",
              "      <td>-0.131638</td>\n",
              "      <td>0.254993</td>\n",
              "      <td>0.303123</td>\n",
              "      <td>-0.116530</td>\n",
              "      <td>-0.339037</td>\n",
              "      <td>1.252501</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.504458</td>\n",
              "      <td>0.357024</td>\n",
              "      <td>0.237177</td>\n",
              "      <td>-1.081477</td>\n",
              "      <td>0.364874</td>\n",
              "      <td>-1.106034</td>\n",
              "      <td>0.596284</td>\n",
              "      <td>0.227070</td>\n",
              "      <td>1.611493</td>\n",
              "      <td>2.298601</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.056193</td>\n",
              "      <td>-0.701248</td>\n",
              "      <td>-0.298857</td>\n",
              "      <td>-0.297962</td>\n",
              "      <td>0.423388</td>\n",
              "      <td>0.015777</td>\n",
              "      <td>-0.684635</td>\n",
              "      <td>0.056419</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.910989</td>\n",
              "      <td>0.070776</td>\n",
              "      <td>-0.669737</td>\n",
              "      <td>-0.503817</td>\n",
              "      <td>0.841569</td>\n",
              "      <td>-1.730113</td>\n",
              "      <td>0.618766</td>\n",
              "      <td>1.189990</td>\n",
              "      <td>1.052326</td>\n",
              "      <td>-0.604059</td>\n",
              "      <td>...</td>\n",
              "      <td>0.305021</td>\n",
              "      <td>-0.180152</td>\n",
              "      <td>-0.105075</td>\n",
              "      <td>-0.152707</td>\n",
              "      <td>-0.414037</td>\n",
              "      <td>-0.386729</td>\n",
              "      <td>0.087169</td>\n",
              "      <td>0.955003</td>\n",
              "      <td>11</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 52 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fb4769c6-47fd-49db-a470-64443ff26d61')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fb4769c6-47fd-49db-a470-64443ff26d61 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fb4769c6-47fd-49db-a470-64443ff26d61');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ad331bf9-eddd-48c5-a7af-e80e74a22bd8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ad331bf9-eddd-48c5-a7af-e80e74a22bd8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ad331bf9-eddd-48c5-a7af-e80e74a22bd8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "test_df"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_df.isnull().sum()"
      ],
      "metadata": {
        "collapsed": true,
        "id": "w7sONrYkr5Fn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train = train_df.drop(['label1','label_falut'], axis =1)\n",
        "y_freq_train = train_df['label1'].astype(int)\n",
        "y_falut_train = train_df['label_falut'].astype(int)"
      ],
      "metadata": {
        "id": "N2_mjCeXrfT-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_test = test_df.drop(['label1','label_falut'], axis =1)\n",
        "y_freq_test = test_df['label1'].astype(int)\n",
        "y_fault_test = test_df['label_falut'].astype(int)"
      ],
      "metadata": {
        "id": "Ya2Pt3Lgrv-t"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Catboost Model"
      ],
      "metadata": {
        "id": "agBPNoEttz7Z"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Frequency Identification"
      ],
      "metadata": {
        "id": "fwLsX_xlvLXi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model= CatBoostClassifier(\n",
        "        iterations=100,\n",
        "        random_seed=42,\n",
        "        learning_rate=.5,\n",
        "        custom_loss=['Accuracy']\n",
        "    )\n",
        "\n",
        "\n",
        "model.fit(\n",
        "        X_train,\n",
        "        y_freq_train,\n",
        "        verbose=False\n",
        "    )\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "accuracy = metrics.accuracy_score(y_freq_test, y_pred)\n",
        "print(f\"Accuracy of frequency ={accuracy}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B7aci_RhryI8",
        "outputId": "67cbbe97-8710-43ea-c402-cc0d699179eb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of frequency =0.9289861545332738\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_freq_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qq-Tr2rSvTty",
        "outputId": "75ea3c21-05de-426d-ffaf-ef4dcbd52926"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00       193\n",
            "           1       0.88      0.89      0.89       189\n",
            "           2       0.98      0.92      0.95       244\n",
            "           3       1.00      0.91      0.95       217\n",
            "           4       1.00      0.91      0.96       233\n",
            "           5       1.00      0.91      0.95       232\n",
            "           6       0.77      0.91      0.84       234\n",
            "           7       0.94      0.94      0.94       206\n",
            "           8       0.92      0.92      0.92       248\n",
            "           9       0.88      0.91      0.90       188\n",
            "          10       1.00      0.90      0.95       198\n",
            "          11       1.00      1.00      1.00       211\n",
            "          12       0.84      0.94      0.89       213\n",
            "          13       0.96      0.86      0.90       139\n",
            "          14       0.83      1.00      0.91       235\n",
            "          15       1.00      0.89      0.94       190\n",
            "          16       0.92      1.00      0.96       239\n",
            "          17       0.91      0.91      0.91       225\n",
            "          18       1.00      0.90      0.95       203\n",
            "          19       1.00      0.93      0.96       216\n",
            "          20       0.84      0.91      0.87       225\n",
            "\n",
            "    accuracy                           0.93      4478\n",
            "   macro avg       0.94      0.93      0.93      4478\n",
            "weighted avg       0.93      0.93      0.93      4478\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precision_recall_fscore_support(y_freq_test, y_pred, average='weighted')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0dRKG5ULvlPf",
        "outputId": "0f8de187-f946-411e-fb36-eb89501c91a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.9349803246436603, 0.9289861545332738, 0.9300921638167821, None)"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cm = confusion_matrix(y_freq_test, y_pred)\n",
        "\n",
        "plt.figure(figsize=(10, 7))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('Actual Label')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 641
        },
        "id": "BKfdKzhTvwPb",
        "outputId": "4b0365a2-d23a-4dc9-f82e-f77d3e83a90e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Fault Detection"
      ],
      "metadata": {
        "id": "ylXj5vI6zYk6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model= CatBoostClassifier(\n",
        "        iterations=100,\n",
        "        random_seed=42,\n",
        "        learning_rate=.5,\n",
        "        custom_loss=['Accuracy']\n",
        "    )\n",
        "\n",
        "\n",
        "model.fit(\n",
        "        X_train,\n",
        "        y_falut_train,\n",
        "        verbose=False\n",
        "    )\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "accuracy = metrics.accuracy_score(y_fault_test, y_pred)\n",
        "print(f\"Accuracy of falut detection ={accuracy}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mQGb5EppvC0Z",
        "outputId": "38ca1262-01a8-4896-d39a-d3010914153b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of falut detection =0.9671728450200983\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_fault_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jishmoqaz0OI",
        "outputId": "88926117-caab-4e34-a495-df0c78eedb7e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.98      0.95      0.97      2184\n",
            "           1       0.96      0.98      0.97      2294\n",
            "\n",
            "    accuracy                           0.97      4478\n",
            "   macro avg       0.97      0.97      0.97      4478\n",
            "weighted avg       0.97      0.97      0.97      4478\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precision_recall_fscore_support(y_fault_test, y_pred, average='weighted')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5HkVp77Sz3Dm",
        "outputId": "72126229-000e-499a-ad8b-364d65bb6bed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.9675442296585199, 0.9671728450200983, 0.9671541949592872, None)"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cm = confusion_matrix(y_fault_test, y_pred)\n",
        "plt.figure(figsize=(10, 7))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Abnormal','Normal'], yticklabels=['Abnormal','Normal'])\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('Actual Label')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 641
        },
        "id": "GktZZ42q0CKo",
        "outputId": "6955ea66-a337-4ee1-c15b-6c3c459c75fa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Random Forest"
      ],
      "metadata": {
        "id": "N_O8mXb60gxY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Frequencey Identification"
      ],
      "metadata": {
        "id": "FlBqjEKs0nfw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = RandomForestClassifier(n_estimators=500, random_state=42, n_jobs=-1)\n",
        "\n",
        "model.fit( X_train, y_freq_train)\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "accuracy = metrics.accuracy_score(y_freq_test, y_pred)\n",
        "print(f\"Accuracy of frequency ={accuracy}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hs_BJ7ZS0rOP",
        "outputId": "28195cd7-d5a3-4b2e-f80e-7542b65dfec9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of frequency =0.9249665029030817\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_freq_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "99vwALCI07pP",
        "outputId": "677f359f-4719-4ce9-f621-e60ab7ca05ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.90      0.90      0.90       193\n",
            "           1       0.93      0.89      0.91       189\n",
            "           2       1.00      0.92      0.96       244\n",
            "           3       0.91      0.91      0.91       217\n",
            "           4       0.98      0.91      0.95       233\n",
            "           5       0.96      0.91      0.94       232\n",
            "           6       1.00      0.91      0.96       234\n",
            "           7       1.00      0.98      0.99       206\n",
            "           8       1.00      0.92      0.96       248\n",
            "           9       0.79      0.98      0.88       188\n",
            "          10       0.86      0.90      0.88       198\n",
            "          11       1.00      0.99      1.00       211\n",
            "          12       0.94      0.94      0.94       213\n",
            "          13       0.86      0.86      0.86       139\n",
            "          14       0.93      0.94      0.93       235\n",
            "          15       0.97      0.89      0.93       190\n",
            "          16       0.85      0.92      0.88       239\n",
            "          17       0.87      0.91      0.89       225\n",
            "          18       0.93      0.90      0.92       203\n",
            "          19       0.92      1.00      0.96       216\n",
            "          20       0.84      0.91      0.87       225\n",
            "\n",
            "    accuracy                           0.92      4478\n",
            "   macro avg       0.93      0.92      0.92      4478\n",
            "weighted avg       0.93      0.92      0.93      4478\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precision_recall_fscore_support(y_freq_test, y_pred, average='weighted')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m48EhuoB0_be",
        "outputId": "4cb791e4-2ea6-41fb-97e9-4a24942794c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.9288771599322315, 0.9249665029030817, 0.9257429156343269, None)"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cm = confusion_matrix(y_freq_test, y_pred)\n",
        "\n",
        "plt.figure(figsize=(10, 7))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('Actual Label')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 641
        },
        "id": "QZ8C_CpS1E-s",
        "outputId": "3ef1722a-11ea-4081-fba6-f0144d502431"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Fault Detection"
      ],
      "metadata": {
        "id": "UwPKi4p71WD3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = RandomForestClassifier(n_estimators=500, random_state=42, n_jobs=-1)\n",
        "\n",
        "model.fit(\n",
        "        X_train,\n",
        "        y_falut_train)\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "accuracy = metrics.accuracy_score(y_fault_test, y_pred)\n",
        "print(f\"Accuracy of falut detection ={accuracy}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rvsW6wM61Op7",
        "outputId": "a1987b95-17a1-48b7-809a-fc25a86ce82c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of falut detection =0.966726217061188\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_fault_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4qbbfDa91i0q",
        "outputId": "791ea74c-614b-4293-cf68-b60d3bed287f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.97      0.96      0.97      2184\n",
            "           1       0.96      0.97      0.97      2294\n",
            "\n",
            "    accuracy                           0.97      4478\n",
            "   macro avg       0.97      0.97      0.97      4478\n",
            "weighted avg       0.97      0.97      0.97      4478\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precision_recall_fscore_support(y_fault_test, y_pred, average='weighted')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d-UPmeLL1mLr",
        "outputId": "cd8db794-6fba-4458-8fa2-92e148bf71cb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.9667671208598632, 0.966726217061188, 0.9667211366746898, None)"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cm = confusion_matrix(y_fault_test, y_pred)\n",
        "plt.figure(figsize=(10, 7))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Abnormal','Normal'], yticklabels=['Abnormal','Normal'])\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('Actual Label')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 641
        },
        "id": "Rc1sM4kr1pkC",
        "outputId": "a3aba08e-0fc8-41ae-8af7-6d06c277d1dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##XGBoost"
      ],
      "metadata": {
        "id": "rNDchFeP6sHc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Frequency Identification"
      ],
      "metadata": {
        "id": "Wpw4L5_O6uwk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = XGBClassifier(max_depth=5, n_estimators=100, learning_rate=0.1)\n",
        "\n",
        "model.fit( X_train, y_freq_train)\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "accuracy = metrics.accuracy_score(y_freq_test, y_pred)\n",
        "print(f\"Accuracy of frequency ={accuracy}\")"
      ],
      "metadata": {
        "id": "3OL4Xkx21qOK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9bb993d1-0486-4892-eac2-c821a72c112c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of frequency =0.9267530147387226\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_freq_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lql-z2uY7dit",
        "outputId": "28813b4b-72dd-4490-ea78-d3ca28264192"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.99      0.90      0.94       193\n",
            "           1       0.88      0.89      0.89       189\n",
            "           2       1.00      1.00      1.00       244\n",
            "           3       0.92      0.91      0.91       217\n",
            "           4       0.93      0.91      0.92       233\n",
            "           5       0.91      0.91      0.91       232\n",
            "           6       0.88      0.91      0.90       234\n",
            "           7       0.91      1.00      0.95       206\n",
            "           8       0.92      0.92      0.92       248\n",
            "           9       0.90      0.99      0.94       188\n",
            "          10       0.82      0.90      0.86       198\n",
            "          11       0.90      0.91      0.90       211\n",
            "          12       1.00      0.94      0.97       213\n",
            "          13       0.87      0.86      0.86       139\n",
            "          14       0.92      0.94      0.93       235\n",
            "          15       0.92      0.89      0.91       190\n",
            "          16       0.92      0.92      0.92       239\n",
            "          17       0.99      0.91      0.95       225\n",
            "          18       0.90      0.90      0.90       203\n",
            "          19       0.98      1.00      0.99       216\n",
            "          20       1.00      0.91      0.95       225\n",
            "\n",
            "    accuracy                           0.93      4478\n",
            "   macro avg       0.93      0.93      0.93      4478\n",
            "weighted avg       0.93      0.93      0.93      4478\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precision_recall_fscore_support(y_freq_test, y_pred, average='weighted')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7NeEK5zK7rhQ",
        "outputId": "c12d608c-3753-446c-ff68-69d8ed98897c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.9285502502402232, 0.9267530147387226, 0.9269982042858143, None)"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cm = confusion_matrix(y_freq_test, y_pred)\n",
        "\n",
        "plt.figure(figsize=(10, 7))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('Actual Label')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 641
        },
        "id": "POAEJ8-F77iW",
        "outputId": "1cdcef0b-a2fc-44bc-a184-cdd868df8044"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 2 Axes>"
            ],
            "image/png": "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G+Hi4oLLly+jUaNGSEpKwrp167B9+3bFv6E3bNgALy8vnDt3DgEBAfjtt99w69YtHDt2DMWLF0f16tUxffp0hIaG4rvvvoOpqWmB+iLoJOKrr7766HFVZkNERERERPomr8cV5HXPb17eX/bv6OgIALh8+TKysrLQrFkzxTmenp4oU6YMzp49i4CAAJw9exa+vr5Klze1bNkSgwcPRlRUFPz8CnZzPB82R0RERESUgza/4jWvxxWEh+f/uAKZTIYRI0agfv36iqt5YmNjYWpqCnt7e6VzixcvjtjYWMU5OScQ74+/P1ZQOnw1GhERERGRYQsLC8OoUaOU9hVkFWLIkCG4efMm/vjjD0117aM4iSAiIiIiykGbX/Fa0EuXcho6dCgOHDiA06dPo1Spf59l5OrqiszMTCQmJiqtRrx8+RKurq6Kcy5cuKDU3suXLxXHCoqXMxERERER6QG5XI6hQ4di3759OHHiBMqXL6903N/fHyYmJjh+/Lhi3507d/DkyRPUrVsXAFC3bl3cuHEDr169Upxz9OhR2NraokqVKgXuC1ciiIiIiIhy0NWHzQ0ZMgTbt2/HTz/9BBsbG8U9DHZ2drCwsICdnR369euHUaNGwdHREba2thg2bBjq1q2LgIAAAECLFi1QpUoV9OrVCxEREYiNjcXEiRMxZMgQlVZEBH1OhKbwORGGyaHrOkFyE3b303pmskAfYhtd/tJuIqIiQCoT5p9lRmLt/6NZl//KcflSe8/DerW+4M/B+tDkZsOGDfjiiy8A/PuwuR07dig9bC7npUqPHz/G4MGDcerUKVhZWaFPnz6YPXu2/jxsTlM4iTBMnERoHicRRETC4iRCN7j00+IkYp1+PkyX90QQEREREZFKdHgOSERERESkfbp6T4Qu4UoEERERERGphCsRREREREQ5cCUif1yJICIiIiIilXAlgoiIiIgoB65E5I8rETns3L4NQc2boJafL3qGdMGNyEiDzBQqV52ZoztVxR8R7fFqWy883tADu0OboVIJO6VzvmzugSPTWuPl1l5I39sPdpamudrZE9YMd1d3Q8LOPniwrjvWfRMINwfLQvfrPU2/v9euXMLYEV+jQ8vGaODvjdMnj+c659HDvxE6cghaNqqDZvVron+vroiNeaHWfgD8DGsDazW8TKFyWavmCZULABvWrkENX0/MnTNLK3lC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dnY2tm3bhvnz579UVnkzAwICEBERASsrK3h6eiI+Ph7fffcdFixYoNXcbdu2oVq1avDw8MD58+cxevRohIaGvtQF3WV9drCzs8OQIUMwbtw4ODo6wtbWFp988gnatGmD1q1bv1S9pMfEvDWUvvn6668FDw8PwcLCQmjZsqVw/PhxrebFxcUJAEos4eHhWst8Xh4AYe3atVrLHDx4sODp6SlYWFgI1apVEzp16iT8+uuvWst7EV3c4rV3796Cm5ubYGFhIdSoUUPo3bu3cPXqVa1mPvXTTz8JDRo0EKRSqeDj4yOsWrVK65n79+8XAAjJyclaz3oqOztbGD16tODh4SFYWloKderUEb744gtBJpNpNXfLli1CnTp1BAsLC8HV1VUYOXKk8Pjx40rNKOs9QalUCpMnTxaqV68uSKVSoVOnTi/9vS8rc+3atc/dHhUVpbXcp7eTfd4SFxentdyCggKhR48egru7u2BhYSG4ubkJ3bt3F06cOKG1zOeprFu8lpabn58vdO7cWahWrZpgbm4ueHp6CkOHDhXu37+vtcyn1qxZI3h5eQmWlpZC48aNhV27dr1kpeXLXblypWBlZVVpP7dlZd67d08YOHCg4O7uLlhaWgre3t7C/PnzX/o22GXlLlq0SKhZs6Zgbm4ueHh4CJMmTXrp98fyfHYoKCgQRowYITg4OAhVqlQRevToIdy7d++lckm/SQRBy495JSIiIiIio8JrIoiIiIiISCMcRBARERERkUY4iCAiIiIiIo1wEEFERERERBrhIIKIiIiIiDTCQQQREREREWmEgwgiIiIiItIIBxFERERERKQRDiKIiF7SwIEDERoaqvr6zTffxJgxY3TejsOHD0MikeDx48day/hvrRWhi3YSEZF2cRBBREZp4MCBkEgkkEgksLCwgJeXF7766isUFxdrPXvHjh2YNm1aufbV9QfqWrVqYeHChTrJIiIi42UmdgOIiLQlKCgIa9euhUwmw969ezFy5EiYm5sjMjKyxL5FRUWwsLColFxHR8dKOQ4REZG+4kwEERktqVQKV1dXeHp6Yvjw4QgMDMTu3bsB/HtazowZM+Du7g5vb28AwK1bt/Dee+/B3t4ejo6OCAkJwY0bN1THVCgUGDduHOzt7eHk5IQJEyZAEAS13P+eziSTyTBx4kS89tprkEql8PLywpo1a3Djxg10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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Fault Detection"
      ],
      "metadata": {
        "id": "TjKU3m-Q8AJn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = XGBClassifier(max_depth=5, n_estimators=100, learning_rate=0.1)\n",
        "model.fit(\n",
        "        X_train,\n",
        "        y_falut_train)\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "accuracy = metrics.accuracy_score(y_fault_test, y_pred)\n",
        "print(f\"Accuracy of fault detection ={accuracy}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H3ZOVYj177e8",
        "outputId": "de16ee70-2d6f-4553-e641-3ca37c259b70"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of fault detection =0.9622599374720857\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_fault_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XNkY_nHh77cc",
        "outputId": "33e4bf22-3993-43e0-8d07-87054d88254d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.96      0.96      0.96      2184\n",
            "           1       0.97      0.96      0.96      2294\n",
            "\n",
            "    accuracy                           0.96      4478\n",
            "   macro avg       0.96      0.96      0.96      4478\n",
            "weighted avg       0.96      0.96      0.96      4478\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precision_recall_fscore_support(y_fault_test, y_pred, average='weighted')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Fr7OttI_77ZV",
        "outputId": "0c37cded-1523-4d06-c35c-dd8a8113034d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.9622809110475345, 0.9622599374720857, 0.9622623118691703, None)"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cm = confusion_matrix(y_fault_test, y_pred)\n",
        "plt.figure(figsize=(10, 7))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Abnormal','Normal'], yticklabels=['Abnormal','Normal'])\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('Actual Label')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 641
        },
        "id": "Umpw-RDs2hmr",
        "outputId": "3b31cff5-c024-4ec6-dda3-b13759c67c55"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##LGBM"
      ],
      "metadata": {
        "id": "LkLGQcpm3OiT"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Frequency Identification"
      ],
      "metadata": {
        "id": "-qpGtgEN3W4X"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = lgb.LGBMClassifier(max_depth=5, n_estimators=100, learning_rate=0.1)\n",
        "model.fit( X_train, y_freq_train)\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "accuracy = metrics.accuracy_score(y_freq_test, y_pred)\n",
        "print(f\"Accuracy of frequency ={accuracy}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vAYAfoEO2hkb",
        "outputId": "3eac2b19-265b-48bc-ec07-64f4f6a38457"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015736 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 12750\n",
            "[LightGBM] [Info] Number of data points in the train set: 16316, number of used features: 50\n",
            "[LightGBM] [Info] Start training from score -2.982097\n",
            "[LightGBM] [Info] Start training from score -2.977272\n",
            "[LightGBM] [Info] Start training from score -3.045749\n",
            "[LightGBM] [Info] Start training from score -3.040608\n",
            "[LightGBM] [Info] Start training from score -3.032945\n",
            "[LightGBM] [Info] Start training from score -3.030403\n",
            "[LightGBM] [Info] Start training from score -3.032945\n",
            "[LightGBM] [Info] Start training from score -2.997941\n",
            "[LightGBM] [Info] Start training from score -3.050917\n",
            "[LightGBM] [Info] Start training from score -3.041890\n",
            "[LightGBM] [Info] Start training from score -3.038047\n",
            "[LightGBM] [Info] Start training from score -3.004103\n",
            "[LightGBM] [Info] Start training from score -3.019047\n",
            "[LightGBM] [Info] Start training from score -3.511637\n",
            "[LightGBM] [Info] Start training from score -3.065268\n",
            "[LightGBM] [Info] Start training from score -3.019047\n",
            "[LightGBM] [Info] Start training from score -3.053511\n",
            "[LightGBM] [Info] Start training from score -3.021559\n",
            "[LightGBM] [Info] Start training from score -3.034218\n",
            "[LightGBM] [Info] Start training from score -3.014041\n",
            "[LightGBM] [Info] Start training from score -3.024078\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "Accuracy of frequency =0.9227333631085306\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_freq_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "afdedba0-a97a-486e-f8cc-971134136af9",
        "id": "ccOHxTrS3-Q2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.95      0.90      0.92       193\n",
            "           1       0.89      0.89      0.89       189\n",
            "           2       1.00      0.92      0.96       244\n",
            "           3       0.84      0.91      0.87       217\n",
            "           4       1.00      0.91      0.96       233\n",
            "           5       0.91      0.91      0.91       232\n",
            "           6       1.00      0.91      0.95       234\n",
            "           7       0.91      1.00      0.95       206\n",
            "           8       0.91      0.92      0.92       248\n",
            "           9       0.81      1.00      0.90       188\n",
            "          10       0.87      0.90      0.89       198\n",
            "          11       0.91      0.91      0.91       211\n",
            "          12       1.00      0.94      0.97       213\n",
            "          13       0.80      0.86      0.83       139\n",
            "          14       0.92      0.94      0.93       235\n",
            "          15       0.92      0.89      0.91       190\n",
            "          16       0.88      0.92      0.90       239\n",
            "          17       0.94      0.91      0.93       225\n",
            "          18       1.00      0.90      0.95       203\n",
            "          19       0.92      1.00      0.96       216\n",
            "          20       1.00      0.91      0.95       225\n",
            "\n",
            "    accuracy                           0.92      4478\n",
            "   macro avg       0.92      0.92      0.92      4478\n",
            "weighted avg       0.93      0.92      0.92      4478\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precision_recall_fscore_support(y_freq_test, y_pred, average='weighted')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7047f959-bba1-4a35-905c-3ebd118f729b",
        "id": "pE2ArgAY3-Q5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.9267149552403291, 0.9227333631085306, 0.9233802559645391, None)"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cm = confusion_matrix(y_freq_test, y_pred)\n",
        "\n",
        "plt.figure(figsize=(10, 7))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('Actual Label')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 641
        },
        "outputId": "cbeff7bf-5aed-4052-ea07-8ef3f38f0a35",
        "id": "6bRdzO_y3-Q8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Fault Detection"
      ],
      "metadata": {
        "id": "xVBGpbor3-Q-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = lgb.LGBMClassifier(max_depth=5, n_estimators=100, learning_rate=0.1)\n",
        "model.fit(\n",
        "        X_train,\n",
        "        y_falut_train)\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "accuracy = metrics.accuracy_score(y_fault_test, y_pred)\n",
        "print(f\"Accuracy of fault detection ={accuracy}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1d258e50-4d1c-4766-e679-2dcdea90a917",
        "id": "B-Ak-fk-3-RA"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "[LightGBM] [Info] Number of positive: 8372, number of negative: 7944\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.024363 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 12750\n",
            "[LightGBM] [Info] Number of data points in the train set: 16316, number of used features: 50\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.513116 -> initscore=0.052476\n",
            "[LightGBM] [Info] Start training from score 0.052476\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
            "Accuracy of fault detection =0.9696292987941045\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_fault_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "94bff7ac-18c2-426d-f196-4c410370db25",
        "id": "4YH581p33-RB"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.98      0.96      0.97      2184\n",
            "           1       0.96      0.98      0.97      2294\n",
            "\n",
            "    accuracy                           0.97      4478\n",
            "   macro avg       0.97      0.97      0.97      4478\n",
            "weighted avg       0.97      0.97      0.97      4478\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precision_recall_fscore_support(y_fault_test, y_pred, average='weighted')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dab2237e-cc37-4333-cc60-4b6bb34c0c00",
        "id": "FP1V72uo3-RD"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.9697037219766725, 0.9696292987941045, 0.9696229314160942, None)"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cm = confusion_matrix(y_fault_test, y_pred)\n",
        "plt.figure(figsize=(10, 7))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Abnormal','Normal'], yticklabels=['Abnormal','Normal'])\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('Actual Label')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 641
        },
        "outputId": "5addff2b-743e-4025-e433-2011980d3e80",
        "id": "4dBibADI3-RE"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Decision Tree"
      ],
      "metadata": {
        "id": "ulzH9VSy5IWu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Frequency Identification"
      ],
      "metadata": {
        "id": "rGLSuQCJ5K90"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = DecisionTreeClassifier(max_depth=20, criterion='gini', min_samples_split=200)\n",
        "model.fit( X_train, y_freq_train)\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "accuracy = metrics.accuracy_score(y_freq_test, y_pred)\n",
        "print(f\"Accuracy of frequency ={accuracy}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "35ce1199-0f7d-4798-dd83-01446f240477",
        "id": "g4konAkC5K91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of frequency =0.9160339437248772\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_freq_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5316118c-46c0-4dab-f5ae-9e306af16a1f",
        "id": "opd5on_U5K93"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.81      0.90      0.85       193\n",
            "           1       0.76      0.89      0.82       189\n",
            "           2       0.92      0.92      0.92       244\n",
            "           3       1.00      0.91      0.95       217\n",
            "           4       1.00      0.91      0.96       233\n",
            "           5       1.00      0.91      0.95       232\n",
            "           6       1.00      0.91      0.95       234\n",
            "           7       1.00      0.98      0.99       206\n",
            "           8       1.00      0.96      0.98       248\n",
            "           9       0.86      0.91      0.89       188\n",
            "          10       0.90      0.90      0.90       198\n",
            "          11       0.91      0.91      0.91       211\n",
            "          12       0.88      0.92      0.90       213\n",
            "          13       1.00      0.86      0.92       139\n",
            "          14       0.92      0.94      0.93       235\n",
            "          15       1.00      0.89      0.94       190\n",
            "          16       1.00      0.92      0.96       239\n",
            "          17       0.84      0.91      0.88       225\n",
            "          18       0.83      0.90      0.87       203\n",
            "          19       0.91      0.92      0.91       216\n",
            "          20       0.79      0.91      0.85       225\n",
            "\n",
            "    accuracy                           0.92      4478\n",
            "   macro avg       0.92      0.91      0.92      4478\n",
            "weighted avg       0.92      0.92      0.92      4478\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precision_recall_fscore_support(y_freq_test, y_pred, average='weighted')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "34de25b8-afe3-47b1-da2d-00ac1f50c154",
        "id": "UjOKrskv5K95"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.9222373508468712, 0.9160339437248772, 0.9176016646409848, None)"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cm = confusion_matrix(y_freq_test, y_pred)\n",
        "\n",
        "plt.figure(figsize=(10, 7))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('Actual Label')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 641
        },
        "outputId": "f70f6a05-1c23-4fa5-c789-8763edb311f0",
        "id": "QD_O5cQt5K98"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Fault Detection"
      ],
      "metadata": {
        "id": "CGIMAIvH5K99"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = DecisionTreeClassifier(max_depth=20, criterion='gini', min_samples_split=200)\n",
        "model.fit(\n",
        "        X_train,\n",
        "        y_falut_train)\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "accuracy = metrics.accuracy_score(y_fault_test, y_pred)\n",
        "print(f\"Accuracy of fault detection ={accuracy}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bba4872b-0963-4c09-959d-9f050c915b41",
        "id": "X_AUIUXt5K99"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of fault detection =0.9546672621706119\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_fault_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4b391e48-21c4-4a7b-c9fc-da50bdd1d744",
        "id": "Jzaq6nPh5K9-"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.96      0.94      0.95      2184\n",
            "           1       0.95      0.96      0.96      2294\n",
            "\n",
            "    accuracy                           0.95      4478\n",
            "   macro avg       0.95      0.95      0.95      4478\n",
            "weighted avg       0.95      0.95      0.95      4478\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precision_recall_fscore_support(y_fault_test, y_pred, average='weighted')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0a47a6dc-e9cb-4e7b-e462-c37d1ea60705",
        "id": "81EDFLUC5K9_"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.9547860224296933, 0.9546672621706119, 0.9546541106569998, None)"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cm = confusion_matrix(y_fault_test, y_pred)\n",
        "plt.figure(figsize=(10, 7))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Abnormal','Normal'], yticklabels=['Abnormal','Normal'])\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('Actual Label')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 641
        },
        "outputId": "b56cc618-4b1c-444d-e71e-f121644a81f7",
        "id": "du-xHs_X5K-A"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##SVM"
      ],
      "metadata": {
        "id": "QPRjBLZI6km3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Frequency Identification"
      ],
      "metadata": {
        "id": "XbwIAT2y6m1o"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = SVC(C=1.0, kernel='rbf', gamma='auto')\n",
        "model.fit( X_train, y_freq_train)\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "accuracy = metrics.accuracy_score(y_freq_test, y_pred)\n",
        "print(f\"Accuracy of frequency ={accuracy}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c0b238d6-78c6-409d-8b48-b5ce347baec4",
        "id": "vcnPw3X66m1p"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of frequency =0.9187137114783386\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_freq_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b0c04369-6710-4563-bbe4-eb994d6d7ca2",
        "id": "-w9kd-kF6m1p"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.95      0.90      0.92       193\n",
            "           1       0.99      0.89      0.94       189\n",
            "           2       1.00      0.92      0.96       244\n",
            "           3       0.92      0.91      0.91       217\n",
            "           4       0.93      0.91      0.92       233\n",
            "           5       0.95      0.91      0.93       232\n",
            "           6       0.98      0.91      0.94       234\n",
            "           7       0.95      0.90      0.93       206\n",
            "           8       1.00      0.92      0.96       248\n",
            "           9       0.74      1.00      0.85       188\n",
            "          10       0.88      0.90      0.89       198\n",
            "          11       1.00      0.93      0.97       211\n",
            "          12       0.98      0.94      0.96       213\n",
            "          13       0.88      0.86      0.87       139\n",
            "          14       0.96      0.94      0.95       235\n",
            "          15       0.91      0.89      0.90       190\n",
            "          16       0.70      0.92      0.79       239\n",
            "          17       0.89      0.91      0.90       225\n",
            "          18       0.85      0.90      0.87       203\n",
            "          19       1.00      0.97      0.99       216\n",
            "          20       0.97      0.91      0.94       225\n",
            "\n",
            "    accuracy                           0.92      4478\n",
            "   macro avg       0.93      0.92      0.92      4478\n",
            "weighted avg       0.93      0.92      0.92      4478\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precision_recall_fscore_support(y_freq_test, y_pred, average='weighted')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ed1078fa-b26c-4cce-b807-6b2d4e208fc1",
        "id": "wZP19eyV6m1q"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.9274819820154414, 0.9187137114783386, 0.9208234323573854, None)"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cm = confusion_matrix(y_freq_test, y_pred)\n",
        "\n",
        "plt.figure(figsize=(10, 7))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('Actual Label')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 641
        },
        "outputId": "6a3f7935-4af3-4046-9c47-6fafd87e81f7",
        "id": "BiUCiuS76m1r"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Fault Detection"
      ],
      "metadata": {
        "id": "Hv1_Vexp6m1s"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = SVC(C=1.0, kernel='rbf', gamma='auto')\n",
        "model.fit(\n",
        "        X_train,\n",
        "        y_falut_train)\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "accuracy = metrics.accuracy_score(y_fault_test, y_pred)\n",
        "print(f\"Accuracy of fault detection ={accuracy}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "699fa688-4c1a-44fa-defd-46bd4a36b058",
        "id": "kTk2vdwF6m1t"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of fault detection =0.9551138901295221\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_fault_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ba37dacb-1ad0-4498-bbe2-1c0feaabe1c1",
        "id": "kCnoXgmd6m1v"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.96      0.95      0.95      2184\n",
            "           1       0.95      0.96      0.96      2294\n",
            "\n",
            "    accuracy                           0.96      4478\n",
            "   macro avg       0.96      0.95      0.96      4478\n",
            "weighted avg       0.96      0.96      0.96      4478\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precision_recall_fscore_support(y_fault_test, y_pred, average='weighted')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b0a7be59-395a-411c-e5fa-5f0f37e85701",
        "id": "ICb23Ou46m1w"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.9552201327115812, 0.9551138901295221, 0.9551017021671098, None)"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cm = confusion_matrix(y_fault_test, y_pred)\n",
        "plt.figure(figsize=(10, 7))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Abnormal','Normal'], yticklabels=['Abnormal','Normal'])\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('Actual Label')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 641
        },
        "outputId": "2209d668-8fd7-4f3f-cc01-d8d82a8fd28d",
        "id": "UgkcEBfC6m1y"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}